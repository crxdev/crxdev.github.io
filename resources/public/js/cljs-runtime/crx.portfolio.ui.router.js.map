{"version":3,"sources":["crx/portfolio/ui/router.cljs"],"mappings":"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","names":["crx.portfolio.ui.router/routes","crx.portfolio.ui.router/route?","cljs.core/keyword?","cljs.spec.alpha/def-impl","cljs.spec.alpha.every_impl","cljs.spec.alpha.tuple_impl","G__36069","cljs.core/map?","i__12139__auto__","v__12140__auto__","cljs.core.nth","cljs.core/string?","cljs.spec.alpha/map-spec-impl","G__36070","cljs.core/contains?","crx.portfolio.ui.router/match-route","cljs.core.partial","bidi.bidi/match-route","crx.portfolio.ui.router/path-for","bidi.bidi/path-for","crx.portfolio.ui.router/navigate","route","cljs.core/reset!","crx.portfolio.ui.state/route-ratom","crx.portfolio.ui.router/ignore-paths","crx.portfolio.ui.router/processable-url?","uri","clojure.string/blank?","cljs.core/not","G__36071","cljs.core/re-matches","cljs.core/re-pattern","js/location","crx.portfolio.ui.router/pushy-instance","cljs.core/memoize","pushy.core.pushy","var_args","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","crx.portfolio.ui.router/navigate-to","seq36074","self__4852__auto__","cljs.core/seq","route-args","G__36075","cljs.core/first","pushy.core/set-token!","cljs.core.apply","js/console.warn","crx.portfolio.ui.router/navigate-to-redirect-or","seq36076","fallback-route-args","temp__5751__auto__","cljs.core/deref","crx.portfolio.ui.state/redirect-route-args-ratom","map__36077","cljs.core/--destructure-map","cljs.core.get","handler","route-params","cljs.core.into","cljs.core/flatten","reagent.core/rswap!","cljs.core/constantly","crx.portfolio.ui.router/start!","pushy.core/start!","cljs.core/add-watch","_","temp__5753__auto__","redirect-route-args","goog.Uri/parse","js/window.location"],"sourcesContent":["(ns crx.portfolio.ui.router\n  (:require\n   [bidi.bidi :as bidi]\n   [clojure.spec.alpha :as s]\n   [clojure.string :as string]\n   [crx.portfolio.ui.state :as state]\n   [pushy.core :as pushy]\n   [reagent.core :as r])\n  (:import\n   [goog Uri]))\n\n(def routes\n  [\"/\"\n   [[\"\" ::portfolio]\n    [true ::not-found]]])\n\n(def route? keyword?)\n(s/def ::route route?)\n(s/def ::handler ::route)\n(s/def ::route-params (s/map-of keyword? string?))\n(s/def ::route-match\n  (s/keys :req-un [::handler]\n          :opt-un [::route-params]))\n\n(def match-route\n  (partial bidi/match-route routes))\n\n(def path-for\n  (partial bidi/path-for routes))\n\n(defn- navigate\n  ^{:fm/doc\n    \"This needs to be private since it's used internally\n    to update the event db without updating the window.location.href\"\n    :fm/args ::route}\n  [route]\n  (reset! state/route-ratom route))\n\n(def ignore-paths\n  #{})\n\n;; Lifted from pushy.core/processable-url? (which is private)\n;; Blank URLs are not processable.\n;; By default only process relative URLs + URLs matching window's origin\n(defn processable-url? [uri]\n  (and (not (string/blank? uri))\n       (not (ignore-paths ^String (.getPath uri))) ;; injected condition\n       (or (and (not ^Boolean (.hasScheme uri)) (not ^Boolean (.hasDomain uri)))\n           (some? (re-matches\n                   (re-pattern (str \"^\" (.-origin js/location) \".*$\"))\n                   (str uri))))))\n\n(def pushy-instance\n  (memoize\n   (fn []\n     (pushy/pushy\n      navigate\n      match-route\n      :processable-url? processable-url?))))\n\n(defn navigate-to\n  ^{:fm/doc  \"Update the window.location with the path for the given route\"\n    :fm/args ::route}\n  [& route-args]\n  (if (route? (first route-args))\n    (pushy/set-token! (pushy-instance) (apply path-for route-args))\n    (js/console.warn (str \"Cannot navigate to unknown route: \" route-args))))\n\n(defn navigate-to-redirect-or\n  ^{:fm/doc \"When navigating, redirect to the redirect args stored in state, if\n  any. Otherwise redirect to the given [[fallback-route-args]]\"}\n  [& fallback-route-args]\n  (if-let [route-args @state/redirect-route-args-ratom]\n    (let [{:keys [handler route-params]\n           :or   {route-params {}}}\n          route-args]\n      (->> (into [] route-params)\n           (flatten)\n           (apply navigate-to handler))\n      (r/rswap! state/redirect-route-args-ratom (constantly nil)))\n    (apply navigate-to fallback-route-args)))\n\n(defn start!\n  \"Start the pushy history event subscriptions\"\n  []\n  (pushy/start! (pushy-instance)))\n\n(add-watch state/route-ratom ::get-redirect-route-args\n           (fn [_ _ _ _]\n             (when-let [redirect-route-args\n                        (-> (Uri/parse js/window.location)\n                            ^js/Object (.getQueryData)\n                            (.get \"redirect\")\n                            (match-route))]\n               (->> (constantly redirect-route-args)\n                    (r/rswap! state/redirect-route-args-ratom)))))\n"]}